version: '3.8'
services:
  auth:
    image: jboss/keycloak:10.0.2
    entrypoint: docker/dockerize -wait tcp://auth-db:5432
    command: /opt/jboss/tools/docker-entrypoint.sh -b 0.0.0.0
    networks: [proxy, auth-db]
    restart: always
    expose: [8080]
    volumes:
      - type: bind
        source: ./docker/dockerize
        target: /docker/dockerize
        read_only: true
    environment:
      DB_ADDR: auth-db
      DB_DATABASE: postgres
      DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      DB_USER: postgres
      DB_VENDOR: postgres
      KEYCLOAK_FRONTEND_URL: http://localhost/auth
      KEYCLOAK_PASSWORD: ${KEYCLOAK_PASSWORD}
      KEYCLOAK_USER: admin
  auth-db:
    image: postgres:12.3
    networks: [auth-db]
    expose: [5432]
    restart: always
    environment:
      POSTGRES_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
    volumes:
      - type: volume
        source: auth-db
        target: /var/lib/postgresql/data
  chat:
    entrypoint: docker/dockerize -wait http://auth:8080 -wait tcp://chat-db:5432 -timeout 3m
    networks: [proxy, chat-db]
    expose: [80]
    restart: always
    environment:
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: ${KEYCLOAK_PASSWORD}
      KEYCLOAK_URL: http://auth:8080
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET}
      KEYCLOAK_SMTP_HOST: ${KEYCLOAK_SMTP_HOST}
      KEYCLOAK_SMTP_TLS_PORT: ${KEYCLOAK_SMTP_TLS_PORT}
      KEYCLOAK_SMTP_USER: ${KEYCLOAK_SMTP_USER}
      KEYCLOAK_SMTP_PASSWORD: ${KEYCLOAK_SMTP_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${CHAT_DB_PASSWORD}
      POSTGRES_URL: chat-db:5432
  chat-db:
    image: postgres:12.3
    restart: always
    expose: [5432]
    networks: [chat-db]
    environment:
      POSTGRES_PASSWORD: ${CHAT_DB_PASSWORD}
    volumes:
      - type: volume
        source: chat-db
        target: /var/lib/postgresql/data
  proxy:
    image: caddy:2.1.1
    networks: [proxy]
    expose: [80, 443, 2019]
    ports: [80:80, 443:443]
    restart: always
    volumes:
      - type: bind
        source: ./Caddyfile
        target: /etc/caddy/Caddyfile
        read_only: true
      - type: volume
        source: caddy-config
        target: /config
      - type: volume
        source: caddy-data
        target: /data
volumes:
  auth-db:
  caddy-config:
  caddy-data:
  chat-db:
networks:
  auth-db:
  chat-db:
  proxy: