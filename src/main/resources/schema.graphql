"""A `String` conforming to ISO 8601."""
scalar DateTime

schema {
  query: Query
  mutation: Mutation
}

type Query {
  """
  Returns whether the user's account can be deleted. The only reason the account cannot be deleted is if the user is
  the admin of a group chat containing users other than themselves. In this case, they must first appoint a different
  user as the admin.

  You must send a JWT with this request.
  """
  canDeleteAccount: Boolean!

  """
  Returns the user's account info.

  You must send a JWT with this request.
  """
  readAccount: AccountInfo!

  """Returns whether the `username` has been taken."""
  isUsernameTaken(
    username: String!
  ): Boolean!

  """Returns whether the `email` has been taken."""
  isEmailTaken(
    email: String!
  ): Boolean!

  """
  Returns the chats the user is in.

  You must send a JWT with this request.
  """
  readChats: [Chat!]!

  """
  Case-insensitively searches group chats and private chats. Private chats are searched by matching the `query` with
  the username, first name, and last name of users the user has chats with. Group chats are searched by matching the
  `query` with the title of group chats the user is in.

  You must send a JWT with this request.
  """
  searchChats(
    query: String!
  ): [Chat!]!

  """
  Retrieves saved contacts.

  You must send a JWT with this request.
  """
  readContacts: [AccountInfo!]!

  """
  Case-insensitively searches contacts using the `query`.

  You must send a JWT with this request.
  """
  searchContacts(query: String!): [AccountInfo!]!

  """
  Operations such as `Query.updateAccount` require authentication via a JWT. You can acquire a JWT to authenticate the
  user by passing their `username` and `password` to this operation. Returns the token set.

  Returned `errors[0].message`s could be `"NONEXISTENT_USER"`, `"UNVERIFIED_EMAIL"`, or `"INCORRECT_PASSWORD"`.
  """
  requestJwt(
    login: Login!
  ): AuthToken!

  """
  Searches users. The `query` is case-insensitively matched against users' usernames, emails, first names, and last
  names. Returns the users found.
  """
  searchUsers(
    query: String!
  ): [AccountInfo!]!
}

type Mutation {
  """
  Deletes the user's account. Use `Query.canDeleteAccount` to check if you can delete the account. Returns whether the
  account was deleted.

  You must send a JWT with this request.
  """
  deleteAccount: Boolean!

  """
  Updates the user's account. Only the non-null fields will be updated. Use `Query.isUsernameTaken` and
  `Query.isEmailTaken` to see whether you can update the `AccountUpdate.username` and `AccountUpdate.email` fields to
  the requested ones respectively. Returns whether the account was updated. None of the updates will take place if
  even one of the fields were invalid.

  Returned `errors[0].message`s could be `"USERNAME_TAKEN"`, or `"EMAIL_TAKEN"`.

  You must send a JWT with this request.
  """
  updateAccount(
    update: AccountUpdate!
  ): Boolean!

  """
  Creates an account, and sends them a verification email. The user will not be allowed to log in until they verify
  their email address. Returns whether the account was created. Use `Query.isUsernameTaken` and `Query.isEmailTaken`
  to see whether you can use the requested `NewAccount.username` and `NewAccount.email` fields respectively.

  Returned `errors[0].message`s could be `"USERNAME_TAKEN"`, or `"EMAIL_TAKEN"`.
  """
  createAccount(
    account: NewAccount!
  ): Boolean!

  """
  Sends the user an email to verify their email address. For example, the user may want the email verification to be
  resent because the one which was automatically sent when their account was created timed out. Returns whether the
  verification email was sent. Use `Query.isEmailTaken` to check whether the supplied `email` address exists.

  Returned `errors[0].message`s could be `"UNREGISTERED_EMAIL"`.
  """
  verifyEmail(
    email: String!
  ): Boolean!

  """
  Sends a password reset email to the supplied `email` address. Returns whether the password was reset. Use
  `Query.isEmailTaken` to check whether the supplied `email` address exists. If the user is logged in (i.e., you have
  a JWT), and wants to update their password, you should use `Mutation.updateAccount` instead.

  Returned `errors[0].message`s could be `"UNREGISTERED_EMAIL"`.
  """
  resetPassword(
    email: String!
  ): Boolean!

  """
  Leaves the group chat. Returns whether the chat was left.

  Returned `errors[0].message`s could be `"INVALID_CHAT_ID"`, `"INVALID_NEW_ADMIN_ID"`, or `"MISSING_NEW_ADMIN_ID"`.

  You must send a JWT with this request.
  """
  leaveGroupChat(
    chatId: Int!
    """
    If the user is the group's admin, and is not the last user in the chat, then this must be specified as the user
    ID of another participant in the group who will become the new admin.
    """
    newAdminId: String
  ): Boolean!

  """
  Updates a group chat. Only the admin can update it. Only non-null fields will be updated.

  Returned `errors[0].message`s could be `"INVALID_CHAT_ID"`, `"UNAUTHORIZED"`, or `"INVALID_NEW_ADMIN_ID"`.

  You must send a JWT with this request.
  """
  updateGroupChat(
    update: GroupChatUpdate!
  ): Boolean!

  """
  Creates a group chat. Returns the new chat's ID.

  Returned `errors[0].message`s could be `"INVALID_USER_ID"`, `"INVALID_TITLE_LENGTH"`, or
  `"INVALID_DESCRIPTION_LENGTH"`.

  You must send a JWT with this request.
  """
  createGroupChat(
    chat: NewGroupChat!
  ): Int!

  """
  Deletes a private chat. Returns whether the chat was deleted.

  Returned `errors[0].message`s could be `"INVALID_CHAT_ID"`.

  You must send a JWT with this request.
  """
  deletePrivateChat(
    chatId: Int!
  ): Boolean!

  """
  Creates a private chat with the `userId`. Returns the chat's ID.

  Returned `errors[0].message`s could be `"CHAT_EXISTS"`, or `"INVALID_USER_ID"`.

  You must send a JWT with this request.
  """
  createPrivateChat(
    userId: String!
  ): Int!

  """
  Sends a message in a chat. Returns whether the message was sent.

  You must send a JWT with this request.
  """
  message(
    message: Message!
  ): Boolean!

  """
  Remove saved contacts. Invalid contacts (e.g., invalid user IDs, unsaved contacts) will be ignored. Returns whether
  the contacts were deleted.

  You must send a JWT with this request.
  """
  deleteContacts(
    userIdList: [String!]!
  ): Boolean!

  """
  Saves contacts. Contacts previously saved will be ignored. If the user's own contact is present, it will be ignored.
  Invalid user IDs will be ignored. Returns whether the contacts were saved.

  Returned `errors[0].message`s could be `"INVALID_CONTACT"`.

  You must send a JWT with this request.
  """
  createContacts(
    userIdList: [String!]!
  ): Boolean!
}

type AccountInfo {
  id: String!
  username: String!
  email: String!
  firstName: String
  lastName: String
}

interface Chat {
  id: Int!
}

type GroupChat implements Chat {
  id: Int!
  """1-70 characters."""
  title: String!
  """At most 1000 characters."""
  description: String
  adminId: String!
  userIdList: [String!]!
}

type PrivateChat implements Chat {
  id: Int!
  """The ID of the user being chatted with."""
  userId: String!
}

"""The `jwt` and `refreshToken` expire in one hour and one week respectively."""
type AuthToken {
  jwt: String!
  expiry: DateTime!
  refreshToken: String!
  refreshTokenExpiry: DateTime!
}

input NewAccount {
  username: String!
  password: String!
  email: String!
  firstName: String
  lastName: String
}

input Login {
  username: String!
  password: String!
}

input AccountUpdate {
  username: String
  password: String
  email: String
  firstName: String
  lastName: String
}

input GroupChatUpdate {
  chatId: String!
  """1-70 characters."""
  title: String
  """At most 1000 characters."""
  description: String
  """The ID of every new user to add."""
  newUserIdList: [String!]
  """The ID of every user to remove."""
  removedUserIdList: [String!]
  """Transfers the admin status to the specified user ID."""
  newAdminId: String
}

input NewGroupChat {
  """1-70 characters."""
  title: String!
  """At most 1000 characters."""
  description: String
  userIdList: [String!]
}

input Message {
  chatId: Int!
  """At most 10,000 characters."""
  message: String!
}