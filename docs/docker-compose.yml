version: '3.8'
services:
  auth:
    image: jboss/keycloak:11.0.0
    entrypoint: sh -c '
      chmod +x /dockerize && /dockerize -wait tcp://auth-db:5432 && /opt/jboss/tools/docker-entrypoint.sh -b 0.0.0.0
      '
    networks: [ proxy, auth-db ]
    restart: always
    expose: [ 8080 ]
    volumes:
      - type: bind
        source: ./dockerize
        target: /dockerize
    environment:
      DB_ADDR: auth-db
      DB_DATABASE: postgres
      DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      DB_USER: postgres
      DB_VENDOR: postgres
      KEYCLOAK_FRONTEND_URL: http://localhost/auth
      KEYCLOAK_PASSWORD: ${KEYCLOAK_PASSWORD}
      KEYCLOAK_USER: admin
  auth-db:
    image: postgres:12.4
    networks: [auth-db]
    expose: [5432]
    restart: always
    environment:
      POSTGRES_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
    volumes:
      - type: volume
        source: auth-db
        target: /var/lib/postgresql/data
  chat:
    image: docker.pkg.github.com/neelkamath/omni-chat/omni-chat:0.6.0
    entrypoint:
      docker/dockerize -wait http://auth:8080 -wait tcp://chat-db:5432 -wait tcp://message-broker:6379 -timeout 3m
    command: java -server -jar omni-chat-all.jar
    networks: [broker, chat-db, proxy]
    expose: [80]
    restart: always
    environment:
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: ${KEYCLOAK_PASSWORD}
      KEYCLOAK_URL: http://auth:8080
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET}
      KEYCLOAK_SMTP_HOST: ${KEYCLOAK_SMTP_HOST}
      KEYCLOAK_SMTP_TLS_PORT: ${KEYCLOAK_SMTP_TLS_PORT}
      KEYCLOAK_SMTP_USER: ${KEYCLOAK_SMTP_USER}
      KEYCLOAK_SMTP_PASSWORD: ${KEYCLOAK_SMTP_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${CHAT_DB_PASSWORD}
      POSTGRES_URL: chat-db:5432
      REDIS_URL: redis://message-broker:6379
      ALLOWED_DOMAINS: ${ALLOWED_DOMAINS}
  chat-db:
    image: postgres:12.4
    restart: always
    expose: [5432]
    networks: [chat-db]
    environment:
      POSTGRES_PASSWORD: ${CHAT_DB_PASSWORD}
    volumes:
      - type: volume
        source: chat-db
        target: /var/lib/postgresql/data
  message-broker:
    image: redis:6.0.6
    restart: always
    expose: [6379]
    networks: [broker]
    sysctls:
      net.core.somaxconn: 511
  proxy:
    image: caddy:2.1.1
    networks: [proxy]
    expose: [80, 443, 2019]
    ports: [80:80, 443:443]
    restart: always
    volumes:
      - type: bind
        source: ./Caddyfile
        target: /etc/caddy/Caddyfile
        read_only: true
      - type: volume
        source: caddy-config
        target: /config
      - type: volume
        source: caddy-data
        target: /data
volumes:
  auth-db:
  caddy-config:
  caddy-data:
  chat-db:
networks:
  auth-db:
  broker:
  chat-db:
  proxy: