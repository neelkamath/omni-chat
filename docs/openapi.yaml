openapi: 3.0.3
info:
  title: Omni Chat
  version: '0.0.1'
  description: |
    Free, open core, federated chat system, to replace every existing chat app.

    To view the documentation for previous versions, see the
    [older releases](https://github.com/neelkamath/omni-chat/releases).
  contact:
    name: Neel Kamath
    email: neelkamathonline@gmail.com
    url: https://github.com/neelkamath/omni-chat
  license:
    name: MIT
    url: https://github.com/neelkamath/omni-chat/blob/master/LICENSE
servers:
  - url: http://localhost:80
    description: You'll have to run the server yourself.
paths:
  /health-check:
    get:
      tags: [status]
      security: []
      description: Checks if all systems are operational. An example use case for this endpoint is for a backend
        developer to have the server automatically restart once it becomes "unhealthy".
      operationId: checkHealth
      responses:
        '204':
          description: All systems are operational.
  /jwt-refresh:
    post:
      tags: [jwt]
      security: []
      description: Once the JWT has expired, the user would have to log in again. You can avoid this by requesting a new
        set of tokens using the refresh token you received with the JWT. Dates conform to ISO 8601.
      operationId: refreshJwt
      requestBody:
        $ref: '#/components/requestBodies/RefreshJwt'
      responses:
        '200':
          $ref: '#/components/responses/Jwt'
components:
  schemas:
    Jwt:
      type: object
      example:
        jwt: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJjNDExNGUyOC1kN2M4LTQ5NjMtYTk4Yy01NThlMDgyNjljY2IiLCJhdWQiOiJvbW5pLWNoYXQiLCJpc3MiOiJodHRwOi8vYXV0aDo4MDgwIiwiZXhwIjoxNTg2MjM1ODkxfQ.7OpaHSmMsAe4TDWLr--ajFEHe9Ar1d9o4R7sygX3wTY
        expiry: 2020-04-07T05:04:51.830Z
        refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICI3MmM2NTE2ZS0zMGE1LTRkNTEtYmI1MS04NGU1NzFkM2Y0N2YifQ.eyJleHAiOjE1ODYyMzczOTEsImlhdCI6MTU4NjIzNTU5MSwianRpIjoiYTBlNmIwZDUtMjdlOC00YTljLWFjNDgtOTdjMDczMjE2ZDIwIiwiaXNzIjoiaHR0cDovL2F1dGg6ODA4MC9hdXRoL3JlYWxtcy9vbW5pLWNoYXQiLCJhdWQiOiJodHRwOi8vYXV0aDo4MDgwL2F1dGgvcmVhbG1zL29tbmktY2hhdCIsInN1YiI6ImM0MTE0ZTI4LWQ3YzgtNDk2My1hOThjLTU1OGUwODI2OWNjYiIsInR5cCI6IlJlZnJlc2giLCJhenAiOiJzZXJ2ZXIiLCJzZXNzaW9uX3N0YXRlIjoiNDBlNzhlYjAtOGZjOS00YzA1LWE2MjQtMDBiNDUwNGM5ODY1Iiwic2NvcGUiOiJwcm9maWxlIGVtYWlsIn0.kOJHHOAckmxJ9ymDNTan92HX8HmMkZJ28s6VdTjfe88
        refresh_token_expiry: 2020-04-07T05:29:51.852Z
      properties:
        jwt:
          type: string
          description: The JWT to send with requests requiring authentication
        expiry:
          type: string
          description: When the JWT expires
        refresh_token:
          type: string
          description: The JWT is short-lived. Once it expires, the user would have to log in again. This can be avoided
            by passing the refresh token to the HTTP POST /jwt_refresh endpoint to request a new set of tokens.
        refresh_token_expiry:
          type: string
          description: When the refresh token expires
      required: [jwt, expiry, refresh_token, refresh_token_expiry]
    RefreshJwt:
      type: object
      properties:
        refresh_token:
          type: string
          description: The refresh token you got with the JWT
      required: [refresh_token]
  requestBodies:
    RefreshJwt:
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/RefreshJwt'
  responses:
    Jwt:
      description: Token set
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Jwt'