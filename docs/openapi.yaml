# Name `operationId`s using the format <<HTTP_METHOD><PATH>> (e.g., <patchProfilePic> for HTTP PATCH /profile-pic).
openapi: 3.0.3
info:
  version: 0.18.0
  title: Omni Chat
  description: |
    Functionality supplementary to the GraphQL API such as uploading and downloading images.

    In this documentation, a _thumbnail_ refers to an image no bigger than 100px by 100px. These images are at most a
    few KiB. If the original image itself is within 100px by 100px, then the thumbnail will happen to be a copy of the
    same image. When displaying a small scaled image (e.g., a profile pic) you should only render the thumbnail, and not
    load the original, since the difference in quality is negligible. When showing a picture in a container larger than
    100px (e.g., a pic message, an enlarged profile pic), you should load the original. You can also initially load the
    thumbnail followed by the original for a medium-scaled image (e.g., the way searching images on Google works).
  contact:
    name: Neel Kamath
    url: https://github.com/neelkamath/omni-chat-backend
    email: neelkamathonline@gmail.com
  license:
    name: MIT
    url: https://github.com/neelkamath/omni-chat-backend/blob/master/LICENSE
servers:
  - url: http://localhost
    description: This is the URL if you're running it locally. Otherwise, it's the URL you or someone else is running it
      on.
tags:
  - name: profilePic
  - name: groupChatPic
  - name: picMessage
  - name: audioMessage
  - name: videoMessage
  - name: docMessage
  - name: status
paths:
  /pic-message:
    description: Create and read pic chat messages.
    get:
      tags: [ picMessage ]
      description: Reads the pic from a message. To get the caption, use the GraphQL API. You needn't pass an access
        token if the chat is public.
      operationId: getPicMessage
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/MessageId'
        - $ref: '#/components/parameters/PicType'
      responses:
        '200':
          $ref: '#/components/responses/Pic'
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      tags: [ picMessage ]
      description: Creates a pic message. If the chat is a broadcast group, the user must be an admin.
      operationId: postPicMessage
      security:
        - bearerAuth: [ ]
      requestBody:
        $ref: '#/components/requestBodies/CaptionedPic'
      responses:
        '204':
          description: Message created.
        '400':
          $ref: '#/components/responses/InvalidPicMessage'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /audio-message:
    description: Create and read audio chat messages.
    get:
      tags: [ audioMessage ]
      description: Reads an audio message. You needn't pass an access token if the chat is public.
      operationId: getAudioMessage
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/MessageId'
      responses:
        '200':
          $ref: '#/components/responses/Audio'
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      tags: [ audioMessage ]
      description: Creates an audio message. If the chat is a broadcast group, the user must be an admin.
      operationId: postAudioMessage
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/ChatId'
        - $ref: '#/components/parameters/ContextMessageId'
      requestBody:
        $ref: '#/components/requestBodies/AudioMessage'
      responses:
        '204':
          description: Message created.
        '400':
          $ref: '#/components/responses/InvalidMediaMessage'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /video-message:
    description: Create and read video chat messages.
    get:
      tags: [ videoMessage ]
      description: Reads a video message. You needn't pass an access token if the chat is public.
      operationId: getVideoMessage
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/MessageId'
      responses:
        '200':
          $ref: '#/components/responses/Video'
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      tags: [ videoMessage ]
      description: Creates a video message. If the chat is a broadcast group, the user must be an admin.
      operationId: postVideoMessage
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/ChatId'
        - $ref: '#/components/parameters/ContextMessageId'
      requestBody:
        $ref: '#/components/requestBodies/VideoMessage'
      responses:
        '204':
          description: Message created.
        '400':
          $ref: '#/components/responses/InvalidMediaMessage'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /doc-message:
    description: Create and read document chat messages. Doc messages are file messages of any type. Prefer pic, audio,
      and video messages when possible.
    get:
      tags: [ docMessage ]
      description: Reads a doc message. You needn't pass an access token if the chat is public.
      operationId: getDocMessage
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/MessageId'
      responses:
        '200':
          $ref: '#/components/responses/Doc'
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      tags: [ docMessage ]
      description: Creates a doc message. If the chat is a broadcast group, the user must be an admin.
      operationId: postDocMessage
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/ChatId'
        - $ref: '#/components/parameters/ContextMessageId'
      requestBody:
        $ref: '#/components/requestBodies/DocMessage'
      responses:
        '204':
          description: Message created.
        '400':
          $ref: '#/components/responses/InvalidMediaMessage'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /profile-pic:
    description: A user's profile pic which doesn't exceed 5 MiB.
    get:
      tags: [ profilePic ]
      description: Get the user's profile pic.
      operationId: getProfilePic
      parameters:
        - $ref: '#/components/parameters/UserId'
        - $ref: '#/components/parameters/PicType'
      responses:
        '200':
          $ref: '#/components/responses/Pic'
        '204':
          description: The user doesn't have a profile pic.
        '400':
          description: The user doesn't exist.
    patch:
      tags: [ profilePic ]
      description: Update the user's profile pic.
      operationId: patchProfilePic
      security:
        - bearerAuth: [ ]
      requestBody:
        $ref: '#/components/requestBodies/Pic'
      responses:
        '204':
          description: Pic updated.
        '400':
          $ref: '#/components/responses/InvalidPic'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /group-chat-pic:
    get:
      tags: [ groupChatPic ]
      description: Retrieves the group chat's pic. An access token needn't be sent if the chat is public. Otherwise,
        the user must be a participant to view the pic.
      operationId: getGroupChatPic
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/ChatId'
        - $ref: '#/components/parameters/PicType'
      responses:
        '200':
          $ref: '#/components/responses/Pic'
        '204':
          description: The chat doesn't have a pic.
        '400':
          description: Invalid chat ID.
    patch:
      tags: [ groupChatPic ]
      description: Update the group chat's pic. The user must be an admin of the chat.
      operationId: patchGroupChatPic
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/ChatId'
      requestBody:
        $ref: '#/components/requestBodies/Pic'
      responses:
        '204':
          description: Pic updated.
        '400':
          description: The file had an invalid type or size.
        '401':
          $ref: '#/components/responses/Unauthorized'
  /health-check:
    get:
      tags: [ status ]
      description: Check if all systems are operational. For example, a backend developer building atop Omni Chat can
        program the server to automatically restart when it becomes "unhealthy".
      operationId: getHealthCheck
      responses:
        '204':
          description: Healthy.
components:
  schemas:
    InvalidMediaMessage:
      type: object
      properties:
        reason:
          description: An `"INVALID_FILE"` indicates that the file's type or size was unacceptable.
          type: string
          enum: [ USER_NOT_IN_CHAT, INVALID_FILE, INVALID_CONTEXT_MESSAGE ]
    InvalidPicMessage:
      type: object
      properties:
        reason:
          description: An `"INVALID_FILE"` indicates that the file's type or size was unacceptable.
          type: string
          enum: [ USER_NOT_IN_CHAT, INVALID_FILE, INVALID_CONTEXT_MESSAGE, INVALID_CAPTION ]
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    InvalidMediaMessage:
      description: Couldn't create message.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidMediaMessage'
    InvalidPicMessage:
      description: Couldn't create message.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidPicMessage'
    Audio:
      description: An MP3/MP4 video not exceeding 5 MiB.
      content:
        audio/mp3, audio/mp4:
          schema:
            type: string
            format: binary
    Video:
      description: An MP4 video not exceeding 5 MiB.
      content:
        video/mp4:
          schema:
            type: string
            format: binary
    Doc:
      description: A document not exceeding 5 MiB.
      content:
        '*/*':
          schema:
            type: string
            format: binary
    Pic:
      description: A PNG or JPEG image not exceeding 5 MiB.
      content:
        image/png, image/jpeg:
          schema:
            type: string
            format: binary
    Thumbnail:
      description: A PNG or JPEG image.
      content:
        image/png, image/jpeg:
          schema:
            type: string
            format: binary
    InvalidPic:
      description: Pic wasn't a PNG or JPEG not exceeding 5 MiB.
    Unauthorized:
      description: Invalid or missing auth token.
  requestBodies:
    AudioMessage:
      content:
        multipart/form-data:
          schema:
            type: object
            required: [ audio ]
            properties:
              audio:
                description: An MP3/MP4 audio not exceeding 5 MiB.
                type: string
                format: binary
          encoding:
            pic:
              contentType: audio/mp3, audio/mp4
    VideoMessage:
      content:
        multipart/form-data:
          schema:
            type: object
            required: [ video ]
            properties:
              video:
                description: An MP4 video not exceeding 5 MiB.
                type: string
                format: binary
          encoding:
            pic:
              contentType: video/mp4
    DocMessage:
      content:
        multipart/form-data:
          schema:
            type: object
            required: [ doc ]
            properties:
              doc:
                description: A document not exceeding 5 MiB.
                type: string
                format: binary
    CaptionedPic:
      content:
        multipart/form-data:
          schema:
            type: object
            required: [ pic, chat-id ]
            properties:
              pic:
                description: A PNG or JPEG image not exceeding 5 MiB.
                type: string
                format: binary
              chat-id:
                type: integer
                description: Chat to message in.
              context-message-id:
                description: The user might want to give their message a context, such as when replying to a message
                  sent several messages ago. In this case, this is the ID of the message being replied to.
                type: integer
              caption:
                type: string
                description: The pic's caption. Must be a valid `scalar MessageText` (refer to the GraphQL schema).
          encoding:
            pic:
              contentType: image/png, image/jpeg
    Pic:
      content:
        multipart/form-data:
          schema:
            type: object
            required: [ pic ]
            properties:
              pic:
                description: A PNG or JPEG image not exceeding 5 MiB.
                type: string
                format: binary
          encoding:
            pic:
              contentType: image/png, image/jpeg
  parameters:
    UserId:
      name: user-id
      in: query
      description: The ID of the user the pic is to be retrieved from.
      required: true
      schema:
        type: integer
    PicType:
      name: pic-type
      in: query
      description: Whether to retrieve the original or the thumbnail.
      required: true
      schema:
        type: string
        enum: [ ORIGINAL, THUMBNAIL ]
    ChatId:
      name: chat-id
      in: query
      description: Chat ID.
      required: true
      schema:
        type: integer
    MessageId:
      name: message-id
      in: query
      description: Message ID.
      required: true
      schema:
        type: integer
    ContextMessageId:
      name: context-message-id
      in: query
      description: The user might want to give their message a context, such as when replying to a message sent several
        messages ago. In this case, this is the ID of the message being replied to.
      schema:
        type: integer
