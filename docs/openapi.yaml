openapi: 3.0.3
info:
  version: 0.3.1
  title: Omni Chat
  description: Functionality supplementary to the GraphQL API such as manipulating images and audio files.
  contact:
    name: Neel Kamath
    url: https://github.com/neelkamath/omni-chat
    email: neelkamathonline@gmail.com
  license:
    name: MIT
    url: https://github.com/neelkamath/omni-chat/blob/master/LICENSE
servers:
  - url: http://localhost:80
    description: You'll have to run the server yourself.
tags:
  - name: profilePic
  - name: groupChatPic
  - name: picMessage
  - name: audioMessage
  - name: status
paths:
  /pic-message:
    description: Create and read pic chat messages.
    get:
      tags: [picMessage]
      description: Reads the pic from a message. To get the caption, use the GraphQL API.
      operationId: getPicMessage
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/MessageId'
      responses:
        '200':
          $ref: '#/components/responses/Pic'
        '400':
          description: The user can't see the specified message (e.g., it's from a chat the user isn't in).
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      tags: [picMessage]
      description: Creates a pic message. If the chat is a broadcast group, the user must be an admin.
      operationId: postPicMessage
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ChatId'
        - $ref: '#/components/parameters/ContextMessageId'
        - $ref: '#/components/parameters/Caption'
      requestBody:
        $ref: '#/components/requestBodies/Pic'
      responses:
        '204':
          description: Message created.
        '400':
          $ref: '#/components/responses/InvalidPicMessage'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /audio-message:
    description: Create and read audio chat messages.
    get:
      tags: [audioMessage]
      description: Reads an audio message.
      operationId: getAudioMessage
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/MessageId'
      responses:
        '200':
          $ref: '#/components/responses/Audio'
        '400':
          description: The user can't see the specified message (e.g., it's from a chat the user isn't in).
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      tags: [audioMessage]
      description: Creates an audio message. If the chat is a broadcast group, the user must be an admin.
      operationId: postAudioMessage
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ChatId'
        - $ref: '#/components/parameters/ContextMessageId'
      requestBody:
        $ref: '#/components/requestBodies/AudioMessage'
      responses:
        '204':
          description: Message created.
        '400':
          $ref: '#/components/responses/InvalidAudioMessage'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /profile-pic:
    description: A user's profile pic which doesn't exceed 25 MiB.
    get:
      tags: [profilePic]
      description: Get the user's profile pic.
      operationId: getProfilePic
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          $ref: '#/components/responses/Pic'
        '204':
          description: The user doesn't have a profile pic.
        '400':
          description: The user doesn't exist.
    patch:
      tags: [profilePic]
      description: Update the user's profile pic.
      operationId: patchProfilePic
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/Pic'
      responses:
        '204':
          description: Pic updated.
        '400':
          $ref: '#/components/responses/InvalidPic'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /group-chat-pic:
    get:
      tags: [groupChatPic]
      description: Retrieves the group chat's pic.
      operationId: getGroupChatPic
      parameters:
        - $ref: '#/components/parameters/ChatId'
      responses:
        '200':
          $ref: '#/components/responses/Pic'
        '204':
          description: The chat doesn't have a pic.
        '400':
          description: The chat doesn't exist.
    patch:
      tags: [groupChatPic]
      description: Update the group chat's pic. The user must be an admin of the chat.
      operationId: patchGroupChatPic
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ChatId'
      requestBody:
        $ref: '#/components/requestBodies/Pic'
      responses:
        '204':
          description: Pic updated.
        '400':
          $ref: '#/components/responses/InvalidGroupChatPicUpdate'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /health-check:
    get:
      tags: [status]
      description: Check if all systems are operational. For example, a backend developer building atop Omni Chat can
        program the server to automatically restart when it becomes "unhealthy".
      operationId: getHealthCheck
      responses:
        '204':
          description: Healthy.
components:
  schemas:
    InvalidGroupChatPicUpdate:
      type: object
      properties:
        reason:
          description: An `"INVALID_FILE"` indicates that the file's type or size was unacceptable.
          type: string
          enum: [USER_NOT_IN_CHAT, INVALID_FILE]
    InvalidAudioMessage:
      type: object
      properties:
        reason:
          description: An `"INVALID_FILE"` indicates that the file's type or size was unacceptable.
          type: string
          enum: [USER_NOT_IN_CHAT, INVALID_FILE, INVALID_CONTEXT_MESSAGE]
    InvalidPicMessage:
      type: object
      properties:
        reason:
          description: An `"INVALID_FILE"` indicates that the file's type or size was unacceptable.
          type: string
          enum: [USER_NOT_IN_CHAT, INVALID_FILE, INVALID_CONTEXT_MESSAGE, INVALID_CAPTION]
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    InvalidAudioMessage:
      description: Couldn't create message.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidAudioMessage'
    InvalidPicMessage:
      description: Couldn't create message.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidPicMessage'
    InvalidGroupChatPicUpdate:
      description: Couldn't update pic.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidGroupChatPicUpdate'
    Audio:
      description: An MP3 audio not exceeding 25 MiB.
      content:
        audio/mp3:
          schema:
            type: string
            format: binary
    Pic:
      description: A PNG or JPEG image not exceeding 25 MiB.
      content:
        image/png, image/jpeg:
          schema:
            type: string
            format: binary
    InvalidPic:
      description: Pic wasn't a PNG or JPEG not exceeding 25 MiB.
    Unauthorized:
      description: Invalid or missing auth token.
  requestBodies:
    AudioMessage:
      content:
        multipart/form-data:
          schema:
            type: object
            required: [audio]
            properties:
              audio:
                description: An MP3 audio not exceeding 25 MiB.
                type: string
                format: binary
          encoding:
            pic:
              contentType: audio/mp3
    Pic:
      content:
        multipart/form-data:
          schema:
            type: object
            required: [pic]
            properties:
              pic:
                description: A PNG or JPEG image not exceeding 25 MiB.
                type: string
                format: binary
          encoding:
            pic:
              contentType: image/png, image/jpeg
  parameters:
    UserId:
      name: user-id
      in: query
      description: The ID of the user the pic is to be retrieved from.
      required: true
      schema:
        type: integer
    ChatId:
      name: chat-id
      in: query
      description: Chat ID.
      required: true
      schema:
        type: integer
    MessageId:
      name: message-id
      in: query
      description: Message ID.
      required: true
      schema:
        type: integer
    ContextMessageId:
      name: context-message-id
      in: query
      description: The user might want to give their message a context, such as when replying to a message sent several
        messages ago. In this case, this is the ID of the message being replied to.
      schema:
        type: integer
    Caption:
      name: caption
      in: query
      description: The pic's caption. 1-10,000 characters, of which at least one isn't whitespace. Uses CommonMark.
      schema:
        type: string