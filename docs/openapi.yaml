openapi: 3.0.3
info:
  title: Omni Chat
  version: '0.0.1'
  description: |
    Free, open core, federated chat system, to replace every existing chat app.

    To view the documentation for previous versions, see the
    [older releases](https://github.com/neelkamath/omni-chat/releases).

    ## Flow

    Here is the usual flow for using this service.
    1. Have the user sign up for an account. Pass the info they give you to create an account for them using the HTTP
      POST /account endpoint.
    1. Have the user verify their email.
    1. Have the user log in. Using the credentials they give you while logging in, request a JWT to authenticate their
      future actions by using the HTTP POST /jwt-request endpoint.
    1. Use the JWT to authorize requests on behalf of the user (e.g., to use the HTTP PATCH /account endpoint).
    1. Whenever required, refresh the JWT using the HTTP POST /jwt-refresh endpoint.

    Here are the endpoints you can follow to retrieve all the information you might need.
    - Endpoints such as HTTP GET /contacts return user ID lists. You can fetch metadata on a user by supplying the HTTP
      GET /user endpoint with the user ID you have.
    - Endpoints such as HTTP GET /chats return chat ID lists. You can fetch data on private and group chats by supplying
      the HTTP GET /private-chat and HTTP GET /group-chat endpoints with the chat ID you have respectively.

    ## How It Works

    A message can have one of three states. A _sent_ message has been uploaded to the server. A _delivered_ message has
    been downloaded by the other user. A _read_ message has been seen by the other user.

    A _private chat_ is a chat between two users which cannot be converted into a group chat. When a private chat is
    deleted by a user, the messages sent until then are no longer visible to them, and the chat is no longer retrieved
    when requesting their chats. However, the user they were chatting with will still have the chat in the same state it
    was in before the user deleted it. If the other user sends a message to the user, it will show up as the first
    message in the user's chat.

    If you are added to a group chat, or are added back to a group chat after leaving it, you will be able to see the
    entire chat's history.

    ## Notes

    - The same email address cannot be registered twice.
    - Dates conform to ISO 8601.
  contact:
    name: Neel Kamath
    email: neelkamathonline@gmail.com
    url: https://github.com/neelkamath/omni-chat
  license:
    name: MIT
    url: https://github.com/neelkamath/omni-chat/blob/master/LICENSE
servers:
  - url: http://localhost:80
    description: You'll have to run the server yourself.
paths:
  /health-check:
    get:
      tags: [status]
      security: []
      description: Checks if all systems are operational. An example use case for this endpoint is for a backend
        developer to have the server automatically restart once it becomes "unhealthy".
      operationId: checkHealth
      responses:
        '204':
          description: All systems are operational.
  /jwt-refresh:
    post:
      tags: [jwt]
      security: []
      description: Once the JWT has expired, the user would have to log in again. You can avoid this by requesting a new
        set of tokens using the refresh token you received with the JWT.
      operationId: refreshJwt
      requestBody:
        $ref: '#/components/requestBodies/RefreshJwt'
      responses:
        '200':
          $ref: '#/components/responses/Jwt'
components:
  schemas:
    Jwt:
      type: object
      example:
        jwt: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJjNDExNGUyOC1kN2M4LTQ5NjMtYTk4Yy01NThlMDgyNjljY2IiLCJhdWQiOiJvbW5pLWNoYXQiLCJpc3MiOiJodHRwOi8vYXV0aDo4MDgwIiwiZXhwIjoxNTg2MjM1ODkxfQ.7OpaHSmMsAe4TDWLr--ajFEHe9Ar1d9o4R7sygX3wTY
        expiry: 2020-04-07T05:04:51.830Z
        refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICI3MmM2NTE2ZS0zMGE1LTRkNTEtYmI1MS04NGU1NzFkM2Y0N2YifQ.eyJleHAiOjE1ODYyMzczOTEsImlhdCI6MTU4NjIzNTU5MSwianRpIjoiYTBlNmIwZDUtMjdlOC00YTljLWFjNDgtOTdjMDczMjE2ZDIwIiwiaXNzIjoiaHR0cDovL2F1dGg6ODA4MC9hdXRoL3JlYWxtcy9vbW5pLWNoYXQiLCJhdWQiOiJodHRwOi8vYXV0aDo4MDgwL2F1dGgvcmVhbG1zL29tbmktY2hhdCIsInN1YiI6ImM0MTE0ZTI4LWQ3YzgtNDk2My1hOThjLTU1OGUwODI2OWNjYiIsInR5cCI6IlJlZnJlc2giLCJhenAiOiJzZXJ2ZXIiLCJzZXNzaW9uX3N0YXRlIjoiNDBlNzhlYjAtOGZjOS00YzA1LWE2MjQtMDBiNDUwNGM5ODY1Iiwic2NvcGUiOiJwcm9maWxlIGVtYWlsIn0.kOJHHOAckmxJ9ymDNTan92HX8HmMkZJ28s6VdTjfe88
        refresh_token_expiry: 2020-04-07T05:29:51.852Z
      properties:
        jwt:
          type: string
          description: The JWT to send with requests requiring authentication
        expiry:
          type: string
          description: When the JWT expires
        refresh_token:
          type: string
          description: The JWT is short-lived. Once it expires, the user would have to log in again. This can be avoided
            by passing the refresh token to the HTTP POST /jwt_refresh endpoint to request a new set of tokens.
        refresh_token_expiry:
          type: string
          description: When the refresh token expires
      required: [jwt, expiry, refresh_token, refresh_token_expiry]
    RefreshJwt:
      type: object
      properties:
        refresh_token:
          type: string
          description: The refresh token you got with the JWT
      required: [refresh_token]
  requestBodies:
    RefreshJwt:
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/RefreshJwt'
  responses:
    Jwt:
      description: Token set
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Jwt'